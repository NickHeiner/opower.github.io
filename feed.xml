<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Opower Engineering Blog</title>
        <description>The blog of the Opower engineering team.</description>
        <link>http://opower.github.io</link>
        <atom:link href="http://opower.github.io/feed.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Timeshifting in HBase</title>
            <description>&lt;p&gt;For our HBase table layout, we are following an entity-centric model,
evangelized to us by our friends at &lt;a href=&quot;http://www.wibidata.com&quot;&gt;WibiData&lt;/a&gt;.  The idea is to put all of the
data about a single entity into a single row in HBase.  When you need to run
a computation that involves that entity’s data, you have quick access to it by
the row key, and all of the data is stored close together on disk.
Additionally, against many &lt;a href=&quot;http://www.ngdata.com/site/blog/62-ng.html&quot;&gt;suggestions&lt;/a&gt; from the HBase community,
and general confusion about &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2406&quot;&gt;how timestamps work&lt;/a&gt;, we are using
timestamps with logical values.  Instead of just letting the region server
assign a timestamp version to each cell, we are explicitly setting those values
so that we can use timestamp as a true queryable dimension in our &lt;code&gt;get&lt;/code&gt;s and
&lt;code&gt;scan&lt;/code&gt;s.  In addition to the real timeseries data that is indexed using the cell
timestamp, we also have other columns that store metadata about the entity.
That data does not need to be logically timestamped, and we always just want the
most recent version of it.  Given this description, rows in the table look
something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timestamp    data     metadata
   2013      1.09
   2012      0.87
   2011      0.93     &quot;house&quot;
   2010      1.02
   2009      0.98
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows a row that has five timeseries values in it and a piece of metadata
that we keep, a label describing where the data came from.  The metadata is
stored at the timestamp when we wrote it into the table, which in this example
is in 2011.  Since we imported historical data, and we use logical timestamps
for the data column, we have data going back to 2009.  One typical access
pattern is to query for all data from the beginning of “last year” up to now,
because we need that much data for many analyses.  If we ran a &lt;code&gt;get&lt;/code&gt; for this
data, it would normally be set up like this (in pseudo-code, of course):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTimeRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2012&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately that &lt;code&gt;get&lt;/code&gt; would not return us any data for the metadata column,
because there is no valid cell in that timerange.  We have two options: make
a second &lt;code&gt;get&lt;/code&gt; for the metadata or figure out some other solution.  That second
solution is timeshifting.&lt;/p&gt;

&lt;p&gt;Instead of storing the metadata column with a true server timestamp of when it
was written, we shift the timestamp by 50,000 years which makes the row data now
look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timestamp    data     metadata
  52011               &quot;house&quot;
   2013      1.09
   2012      0.87
   2011      0.93
   2010      1.02
   2009      0.98
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we imported the data in 2011 and timeshifted the metadata column
timestamp, its new timestamp is 52,011.  We now change our &lt;code&gt;get&lt;/code&gt; slightly by
setting an ending timestamp to be the logical “end of time”:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;metadata&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTimeRange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2012&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we will get data for the data column and for the metadata column
using only one RPC.  The benefit of HBase being a sparse datastore is that the
data for the metadata column is stored on disk right next to the data for the
data column even though they are logically separated by 50,000 years.
There is no added overhead to the storage to account for this, and thus no added
processing when fetching it.  Furthermore, fetching data for just the metadata column still works
with &lt;code&gt;Result#getColumnLatest()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yes, there is a problem for the future us of the year 52,011, but I’m betting we
will all be using relational databases again by that point.&lt;/p&gt;

</description>
            <pubDate>Fri, 29 Mar 2013 17:10:26 -0700</pubDate>
            <link>http://opower.github.io/2013/03/29/timeshifting-in-hbase</link>
            <guid isPermaLink="true">http://opower.github.io/2013/03/29/timeshifting-in-hbase</guid>
        </item>
        
        <item>
            <title>With all apologies to Psy</title>
            <description>&lt;p&gt;Friday afternoon snippet of South Korea’s Macarena by Opower’s own Wayne Lin and Eddy Leung in our Arlington HQ elevator bank.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/7Fa7KW5AfXQ?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
            <pubDate>Fri, 12 Oct 2012 12:36:03 -0700</pubDate>
            <link>http://opower.github.io/2012/10/12/with-all-apologies-to-psy</link>
            <guid isPermaLink="true">http://opower.github.io/2012/10/12/with-all-apologies-to-psy</guid>
        </item>
        
        <item>
            <title>Upgrading from Spring 3.0.x to Spring 3.1.x</title>
            <description>&lt;p&gt;I recently had the pleasure of upgrading our Java code base from a Spring-3.0.6 base to the latest Spring-3.1.2 libraries.  There were a couple unexpected hiccups I encountered that didn’t have a ton of solutions on stackoverflow or the google, so I thought I’d capture some of them here.&lt;/p&gt;

&lt;p&gt;Additionally, it’s pretty useful to &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.6.RELEASE_to_3.1.0.BUILD-SNAPSHOT/changes.html&quot;&gt;look over the method deprecation and removal page&lt;/a&gt; that the spring guys published for just this kind of operation.&lt;/p&gt;

&lt;h3 id=&quot;changes-to-theorgspringframeworkjdbccoresimple-package&quot;&gt;Changes to the org.springframework.jdbc.core.simple package&lt;/h3&gt;

&lt;p&gt;The ‘.simple’ package is deprecated (including the &lt;code&gt;SimpleJdbcTemplate&lt;/code&gt; class) and there are two new classes you need to know about as you make the transition:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code&gt;org.springframework.jdbc.JdbcTemplate&lt;/code&gt; class is a drop-in replacement for the old &lt;code&gt;SimpleJdbcTemplate&lt;/code&gt; class, &lt;em&gt;unless you’re using named parameters in your queries.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;If you run SQL queries with named parameters through the &lt;code&gt;JdbcTemplate&lt;/code&gt; your code will compile fine but you’ll get odd &lt;code&gt;Serialization&lt;/code&gt; exceptions or &lt;code&gt;ArrayIndexOutOfBoundsExceptions&lt;/code&gt;.  For named parameter queries, you’ll need to use the &lt;code&gt;org.springframework.jdbc.namedparam.NamedParameterJdbcTemplate&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, the &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; wraps the new &lt;code&gt;JdbcTemplate&lt;/code&gt; (well, actually the new &lt;code&gt;JdbcOperations&lt;/code&gt;) so if you’re like Opower and you’ve got a top level &lt;code&gt;AbstractJdbcDAO&lt;/code&gt; class that your JdbcDAOs extend from, you can just swap your Abstract class to extend the &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; and you’ll be off to a good start.&lt;/p&gt;

&lt;h3 id=&quot;supporting-named-parameter-queries-in-spring-312&quot;&gt;Supporting named parameter queries in Spring-3.1.2&lt;/h3&gt;

&lt;p&gt;One thing to be aware of is a swap in the argument list to the &lt;code&gt;.query()&lt;/code&gt; method on the &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; that used to work with the &lt;code&gt;SimpleJdbcTemplate&lt;/code&gt;.  Note this signature difference between the &lt;code&gt;JdbcTemplate&lt;/code&gt; and &lt;code&gt;NamedParameter&lt;/code&gt; version isn’t “new” between Spring 3.0 and 3.1, it’s just that you used be able to get away with passing named parameters through the &lt;code&gt;SimpleJdbcTemplate&lt;/code&gt; and now you can’t.  As you’re converting to the 3.1 spec, you’ll need to correct for that laziness.&lt;/p&gt;

&lt;p&gt;Let’s say you’ve got a SQL query containing named parameters and your code used to happily get by with this call to your &lt;code&gt;SimpleJdbcTemplate&lt;/code&gt;’s &lt;code&gt;.query&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// SQL query with named parameter ( the :zipCodes)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SELECT blah FROM foo WHERE zip_code IN (:zipCodes)&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Our row mapper&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RowMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowMapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Our parameter Map for named parameter substitution&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ImmutableMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ImmutableMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;zipCodes&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipCodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSimpleJdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When using the &lt;code&gt;NamedParameterJdbcTemplate&lt;/code&gt; in Spring-3.1.2 you’ll need switch the argument order of your &lt;code&gt;rowMapper&lt;/code&gt; and your &lt;code&gt;paramMap&lt;/code&gt;, e.g:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blah&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNamedParameterJdbcTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paramMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you don’t make the switch, your call to a &lt;code&gt;JdbcTemplate.query(sql, rowMapper, paramMap)&lt;/code&gt; will happily compile because it meets the &lt;code&gt;JdbcTemplate&lt;/code&gt;’s method signature of&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RowMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rowMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataAccessException&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with the problem being that your &lt;code&gt;rowMapper&lt;/code&gt; object gets passed in as the one and only varargs substitution variable to whatever “?” or “:foo” named parameter you may have in your query.  Depending on the query you’re trying to run you’ll get Serialization exceptions or something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Invalid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ArrayIndexOutOfBoundsException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nested&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Invalid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argument&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ArrayIndexOutOfBoundsException&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;spring-batch-2x-needs-spring-30s-deprecated-jdbcoperations&quot;&gt;Spring-Batch 2.x needs Spring 3.0’s deprecated JdbcOperations&lt;/h3&gt;

&lt;p&gt;If you use Spring Batch’s &lt;code&gt;org.springframework.batch.core.repository.dao.JdbcJobInstanceDao&lt;/code&gt; you’ll need to continue to support the deprecated spring-3.0.x &lt;code&gt;SimpleJdbcTemplate&lt;/code&gt; because that’s the only class allowed to be set on the &lt;code&gt;JdbcJobInstaceDAO&lt;/code&gt; to help it query the DB to look up all the data out of your &lt;code&gt;BATCH_xxx&lt;/code&gt; tables.  Track &lt;a href=&quot;https://jira.springsource.org/browse/BATCH-1685&quot;&gt;https://jira.springsource.org/browse/BATCH-1685&lt;/a&gt; for details about when that deprecated requirement goes away.&lt;/p&gt;

&lt;h3 id=&quot;spring-securitys-accessdecisionvoter-became-parameterized&quot;&gt;Spring Security’s AccessDecisionVoter became parameterized&lt;/h3&gt;

&lt;p&gt;We use Spring Security’s &lt;code&gt;AccessDecisionVoter&lt;/code&gt; to help us authorize (or not) SSO authenticated users.  We used to get away with this Spring-3.0 style implementation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SSOVoter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessDecisionVoter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// make a decision on authentication based on attributes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the parameterization of the &lt;code&gt;AccessDecisionVoter&lt;/code&gt;, the new implementation looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SSOVoter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccessDecisionVoter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Collection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// make a decision on authentication based on attributes&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;new-abstract-method-onorgspringframeworkhttpclientclienthttpresponse&quot;&gt;New abstract method on org.springframework.http.client.ClientHttpResponse&lt;/h3&gt;

&lt;p&gt;If you use or mock Spring’s &lt;code&gt;ClientHttpResponse&lt;/code&gt; object, there’s a new &lt;code&gt;public int getRawStatusCode() throws IOException&lt;/code&gt; signature you’ve got to implement.  With access to an &lt;code&gt;HttpStatus&lt;/code&gt; object, that’s pretty straightforward:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getRawStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;httpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;pay-attention-to-your-spring-context-xsd-versions&quot;&gt;Pay attention to your spring context XSD versions&lt;/h3&gt;

&lt;p&gt;At Opower, we explicitly spell out what XSD versions we pull in to our spring contexts (instead of just leaving the version off which defaults to the latest published version).  This makes upgrades like this more tedious, and in one case caused some digging to figure out that the spring tag library we were using for spring-security wasn’t compatible with a transitive spring-security dependency being pulled in from spring-security-oauth.  If you get errors like “spring security tag 3.0 library incompatible with class … blah” make sure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;your spring context’s XSD is pointing to &lt;code&gt;http://www.springframework.org/schema/security/spring-security-3.1.xsd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;your mvn dependency:tree is pulling in spring-security-3.1&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;spring-31-securitys-taglib-has-a-package-change&quot;&gt;Spring 3.1 Security’s Taglib has a package change.&lt;/h3&gt;

&lt;p&gt;On first load of one of WARs, our login page greeted me with a fat stack trace starting at “TemplateModelException: Could not load taglib information” and ending at “Caused by: java.lang.ClassNotFoundException: org.springframework.security.taglibs.authz.AuthorizeTag”.  The AuthorizeTag class has been renamed to “JspAuthorizeTag”, but there are a few minor formatting and documentation differences between the old and new (3.1) taglibs, so I just copied the whole security.tld taglib over top of the one I had in our WEB-INF from spring’s fisheye site (google search for “spring security.tld 3.1”).&lt;/p&gt;

&lt;h3 id=&quot;spring-31-may-mean-an-update-to-your-oauth-dependency&quot;&gt;Spring 3.1 may mean an update to your OAuth dependency&lt;/h3&gt;

&lt;p&gt;Several of Opower’s web apps leverage OAuth for aspects of our security.  When upgrading to spring-security 3.1, some problems will crop up if you’re using ant-style filter chain maps in your &lt;code&gt;FilterChainProxy&lt;/code&gt;.  For example, one of our &lt;code&gt;securityContext.xml&lt;/code&gt; files contained this snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.springframework.org/schema/security/oauth
http://www.springframework.org/schema/security/spring-security-oauth.xsd&amp;quot;
default-autowire=&amp;quot;byName&amp;quot;&amp;gt;
...snip...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;filterChainProxy&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.springframework.security.web.FilterChainProxy&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;sec:filter-chain-map&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path-type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ant&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
...snip...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When spinning up that context, I’d get an error: “java.lang.ClassNotFoundException: org.springframework.security.web.util.AntUrlPathMatcher.”  Sure enough, there was no &lt;code&gt;AntUrlPathMatcher&lt;/code&gt; in my spring-security-web-3.1.2 JAR on the classpath.  Fixing this necessitated an upgrade of our spring-security-oauth JAR from 1.0.0.M2 to 1.0.0.M6&lt;/p&gt;

&lt;p&gt;Upgrading to the 1.0.0.M6 version of the spring-security-oauth JAR caused some of its own problems which ended up just being another package change (the &lt;code&gt;ProtectedResourceProcessingFilter&lt;/code&gt; class ended up moving from &lt;code&gt;org.springframework.security.oauth.provider&lt;/code&gt; to &lt;code&gt;org.springframework.security.oauth.provider.filter&lt;/code&gt;).&lt;/p&gt;
</description>
            <pubDate>Thu, 06 Sep 2012 13:25:14 -0700</pubDate>
            <link>http://opower.github.io/2012/09/06/upgrading-from-spring-3-0-x-to-spring-3-1-x</link>
            <guid isPermaLink="true">http://opower.github.io/2012/09/06/upgrading-from-spring-3-0-x-to-spring-3-1-x</guid>
        </item>
        
        <item>
            <title>Who's Inhabiting Your Code?</title>
            <description>&lt;p&gt;Lately I’ve been thinking about the notion of “beautiful code”, and finding it to be less and less satisfying as a goal.  First off, beauty is elusive: everyone seems to have a different concept of what it means (and except for mine, they’re all wrong).  And second, even when you can label a piece of code as “beautiful”, it’s not at all clear how that translates into other desirable characteristics like performance, maintainability, and so forth.&lt;/p&gt;

&lt;p&gt;In my reading, I came across a great article by Rebecca Wirfs-Brock&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; in which she discusses the notion of “habitable code”.  This idea isn’t original to her (she credits Richard Gabriel in Patterns of Software&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;), but she provides a great explanation of the concept, and goes on to talk about its role in complex systems.&lt;/p&gt;

&lt;p&gt;Paraphrasing some key points …&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Clarity for its own sake is an elusive goal&lt;/em&gt;.  In my own experience, if I strive really hard to make some aspect of my code crystal clear (say, a challenging algorithm or data structure), it’s at the expense of clarity in some other area. It’s a bit like a game of &lt;a href=&quot;http://en.wikipedia.org/wiki/Whac-A-Mole&quot;&gt;Whac-A-Mole&lt;/a&gt;.  Just as you can’t write code that’s infinitely flexible in the face of unknown future requirements, I don’t think you can write code that’s infinitely clear to an unknown future audience.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Beauty becomes a constraint for future authors&lt;/em&gt;.  It’s hard to extend or update excessively beautiful code without spoiling some of its inherent loveliness.  An analogy to industrial design – the MacBook Air achieves a certain level of elegance by ruthlessly eliminating functionality like replaceable batteries, integrated ethernet or a DVD drive.  How difficult would it be to add that stuff in later without compromising the original aesthetic?  Probably very.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Habitable code makes its structure and intentions easy to understand&lt;/em&gt;.  Structure, sure, but as a professional developer, the “and intentions” part seems pretty important.  You can read code to understand what it’s doing, but it’s not always obvious what problem the original author thought it was solving.  This is a hard thing to do right – the best I’ve been able to do is document the problem being solved, and make the structure of the code appropriate to the solution.  Code reviews are a huge help in identifying areas that need improvement in either direction.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Habitable code makes developers feel at home&lt;/em&gt;.  At &lt;a href=&quot;http://www.opower.com&quot;&gt;Opower&lt;/a&gt; we have a pretty good-sized body of coding conventions, some of which are automatically enforced using tools like Checkstyle and PMD.  To new hires, it sometimes seems totalitarian (it did to me). But once you’ve been around awhile, you notice a funny thing: you can go almost anywhere in our source base and see things done in a similar fashion.  This helps us transition from artifact to artifact more easily, and reduces the overhead in sharing code. Habitable, indeed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like any other principles, these can be reduced to absurdity.  Giving up completely on clarity is obviously not the answer, nor is making your code horribly ugly so that future maintainers don’t feel bad about rewriting it.  But it’s interesting to think about where habitability differs from clarity and beauty, and what it demands of us as developers.&lt;/p&gt;

&lt;p&gt;So … who’s inhabiting your code today?  Whose code are you inhabiting?  How is that going to change in a month?  Six months?  A year?  And what are you doing to make each other feel welcome and at home?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.wirfs-brock.com/PDFs/DoesBeautifulCodeImply.pdf&quot;&gt;Does Beautiful Code Imply Beautiful Design&lt;/a&gt; by Rebecca Wirfs-Brock.&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://dreamsongs.net/Files/PatternsOfSoftware.pdf&quot;&gt;Patterns of Software: Tales from the Software Community&lt;/a&gt; by Richard P. Gabriel.&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
            <pubDate>Thu, 12 Apr 2012 08:51:29 -0700</pubDate>
            <link>http://opower.github.io/2012/04/12/whos-inhabiting-your-code</link>
            <guid isPermaLink="true">http://opower.github.io/2012/04/12/whos-inhabiting-your-code</guid>
        </item>
        
        <item>
            <title>The Birth of OMAMA</title>
            <description>&lt;p&gt;&lt;img src=&quot;/img/bieber.jpg&quot; alt=&quot;Justin Bieber&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Over the last 6 months, I have been slowly filling up the empty wall spaces in the engineering department with various posters of Nickleback, Justin Bieber and Edward from “Twilight”. These posters tended to get relocated and repositioned behind the desks of engineers who had recently broken the build or accidentally replied-to-all on an email thread.&lt;/p&gt;

&lt;p&gt;The posters were fun but admittedly a bit of an eyesore.  Last Friday Ben Foster, our VP of Product, said “enough is enough” and sent an email to the engineering and product teams announcing the immediate departure of Justin, Edward and Nickleback.  Ben’s email was pretty good – complete with fake “goodbye, I’ll miss you” messages, but it immediately raised the rabble in engineering.  ”What was &lt;em&gt;product&lt;/em&gt; doing removing &lt;em&gt;engineering&lt;/em&gt; posters??”, etc. etc.  Adding fuel to the fire was Dan, our CEO, who saw that Ben had poked a sleeping bear and wondered aloud as to the state Ben would find his office when he came in to work on Monday morning…&lt;/p&gt;

&lt;p&gt;“Love thine enemy” formed the basis for engineering’s response:  if Ben didn’t appreciate crappy pop art, we’d provide him with some higher scale fare.  Thus was born the Opower Modern Art Museum, Arlington or “OMAMA.”   Internationalization Team Leader Tyler Bronder and I spent Sunday morning at Michael’s Arts &amp;amp; Crafts and Home Depot collecting supplies and most of Sunday afternoon assembling the highest-brow art we could manage.&lt;/p&gt;

&lt;p&gt;Tyler and I thought a couple Rorschach knock-offs  would be quick and fun contributions to the museum’s collection so we experimented on a few different paint-to-plastic-to-canvas transfer techniques before committing to imprinting on the large 4’x3’ canvases we bought.&lt;/p&gt;

&lt;p&gt;It took a couple of trials and errors with transfer mediums and acrylic viscosity to get the exact technique down correctly, but once we had some confidence in what we were doing we produced a semi-creepy version of our logo which we titled “Pluggy Deconstructed” and a more traditional Rorschach blot that we titled “Interaction Model.”&lt;/p&gt;

&lt;div class=&quot;gallery&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/tom_cutting_transfer_plastic.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/tom_cutting_transfer_plastic-150x150.jpg&quot; alt=&quot;Me, cutting a plastic transfer for our large canvas&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Me, cutting a plastic transfer for our large canvas&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/pluggy_decomposed.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/pluggy_decomposed-150x150.jpg&quot; alt=&quot;Pluggy Decomposed&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Pluggy Decomposed&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/interaction_model.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/interaction_model-150x150.jpg&quot; alt=&quot;Interaction Model&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Interaction Model&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/tyler_starting_to_rorschach1.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/tyler_starting_to_rorschach1-150x150.jpg&quot; alt=&quot;Tyler starting to Rorschach&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Tyler starting to Rorschach&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/energy_calc.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/energy_calc-150x150.jpg&quot; alt=&quot;Energy Calculator&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Energy Calculator&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/composition_w_eligibility.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/composition_w_eligibility-150x150.jpg&quot; alt=&quot;&amp;quot;Composition with Eligibility&amp;quot;&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;&amp;#8220;Composition with Eligibility&amp;#8221;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/self_portrait.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/self_portrait-150x150.jpg&quot; alt=&quot;Self Portrait&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Self Portrait&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/self_portrait-back.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/self_portrait-back-150x150.jpg&quot; alt=&quot;Removing the &amp;quot;Self Portrait&amp;quot; will be difficult.&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;Removing the &amp;#8220;Self Portrait&amp;#8221; will be difficult.&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;col-lg-4&quot;&gt;
    &lt;div class=&quot;thumbnail text-center&quot;&gt;
      &lt;a href=&quot;/img/gallery_view.jpg&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;150&quot; src=&quot;/img/gallery_view-150x150.jpg&quot; alt=&quot;The final product came together nicely&quot; /&gt;&lt;/a&gt;
      &lt;div class=&quot;caption&quot;&gt;The final product came together nicely&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;!--/.gallery --&gt;&lt;/p&gt;

&lt;p&gt;We’ve got a couple pieces of code that are central to the business that cause some newcomers to scratch their heads – our participant eligibility code and the orchestrating energy calculator code in particular have a certain notoriety.  Tyler and I thought those would make good fodder for abstract art, so we knocked off a Modrian and a Pollock to produce the next two works, “Composition with Eligibility” and “Energy Calculator”:&lt;/p&gt;

&lt;p&gt;The final (and best) pieces were put up in Ben’s office.  ”Self Portrait” is an 42.5” x 77” blow up of his facebook photo, pasted up inside his office window.  To discourage tampering with the gallery’s centerpiece, Tyler and I cut a couple of pieces of plexiglass to fit and sealed it in to his window frame with some 1x2x80”s and industrial sealing foam.&lt;/p&gt;

&lt;p&gt;Ben’s been a great sport about it, but as the head of User Experience &lt;em&gt;and&lt;/em&gt; Product, I’m starting to get nervous at the creative energies he has at his disposal for the next battle in this war.  Stay tuned!&lt;/p&gt;
</description>
            <pubDate>Tue, 14 Feb 2012 08:05:22 -0800</pubDate>
            <link>http://opower.github.io/2012/02/14/the-birth-of-omama</link>
            <guid isPermaLink="true">http://opower.github.io/2012/02/14/the-birth-of-omama</guid>
        </item>
        
        <item>
            <title>Spring Configuration and Library Decomposition</title>
            <description>&lt;p&gt;Opower’s evolved rapidly in the last 24 months and nowhere is that more true than in our code base.  Two years ago we had 2 flagship applications that shared model objects, DAOs and a handful of utility classes with one common JAR.  Since then we’ve expanded to the point where (not even counting all the Ruby or Scala stuff) we’re managing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;4 WAR applications&lt;/li&gt;
  &lt;li&gt;33 JAR libraries (1 open sourced @ &lt;a href=&quot;https://github.com/opower/jpile&quot;&gt;https://github.com/opower/jpile&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;14 “pom artifacts” that define groupings of projects and organize dependencies, versions, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not all of that growth was brand new, however.  As we expanded our product lines and thought more about the best way to scale our core features we invested heavily in the decomposition of existing WARs and improving the “librarification” of our code.  In addition to supporting scaling, improving the modularity of our code base also supports a move towards S.O.A. and improves the velocity of our scrum teams.  After all, it’s a lot easier to focus on developing the stories in your iteration if you don’t need to worry about stepping on another team’s toes.  That’s more easily achievable when your team aligns to one specific code artifact.&lt;/p&gt;

&lt;p&gt;A problem we quickly ran in to as we started decomposing WARs and JARs was the creation of a lot of redundant spring configuration files – especially in an integration test context.  Here’s a crude picture of our initial state following some decomposition:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/pic11.png&quot;&gt;&lt;img src=&quot;/img/pic11-300x161.png&quot; alt=&quot;One WAR depending on two JARs with duplicated spring bean configuration&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the WAR includes the two JARs and wires together beans declared in the JARs with an applicationContext.xml defined in the WAR.  We thought it would be a good idea to adopt the policy of “keep the tests close to the code that they stress.”  That’s a sensible policy, but resulted in duplication of context configuration found in the WAR for the purposes of spinning up Spring contexts during integration tests.&lt;/p&gt;

&lt;p&gt;Reducing that duplication was done by continuing the theme of decomposition and applying it to the Spring context as well.  For example, we adopted the policy that a JAR should export a sensible “default wiring” of the classes that it encapsulates.  We adopted naming conventions to facilitate the need to either explicitly or implicitly include a Spring context snippet.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If a JAR includes a context file ending in “-spring.xml” then it’s automatically included by any WAR that declares a dependency on that JAR.&lt;/li&gt;
  &lt;li&gt;On the other hand, if a JAR includes a context file ending in “Context.xml” then it is only brought in to the WAR’s context with an explicitly declared inclusion of that file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what the picture looked like when we migrated to that model:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/pic21.png&quot;&gt;&lt;img src=&quot;/img/pic21-300x170.png&quot; alt=&quot;One WAR with two JARs, but no duplicated bean configuration&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Integration tests that lived in our various JARs liked living in this model because they could always import “*-spring.xml” and their integration test context would come up and run just fine.&lt;/p&gt;

&lt;p&gt;This worked well until we encountered some situations where one JAR started depending on another JAR.  We wanted to ship sensible Spring context defaults from both JARs, but because of the “*-spring.xml” rule we ended up needing to duplicate all of the application properties that were needed to wire up the beans in the depended artifact from within the src/test/resources directory of the dependent JAR.  Here’s a picture to explain what I mean:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/pic31.png&quot;&gt;&lt;img src=&quot;/img/pic31-300x184.png&quot; alt=&quot;Application properties starting to proliferate&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This problem just got worse as you got more and more descended from a given library – for example, if jar-A depends on jar-B depends on jar-C and they all ship with their own “*-spring.xml” files we needed to define properties to configure C within jar-B &lt;strong&gt;and&lt;/strong&gt; we needed to define properties to configure jar-B and jar-C within jar-A.  It was getting hairy.&lt;/p&gt;

&lt;p&gt;To solve this we adopted a new standard that basically amounts to “provide sensible defaults for our sensible defaults”: any bean in a “*-spring.xml” snippet that can be configured with a PropertyPlaceholderConfigurer must provide a sensible default for that property.  So a bean definition might have looked like this before:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;opower.Foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;locale&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;${locale}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;opower.Foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;locale&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;${locale:en_US}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The defaulting of application properties allowed us to eliminate 90% of the boilerplate test properties and code that we would have otherwise needed and allows for a greater abstraction of thought when a developer decides to pull in a library.  Thus, our current setup looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/img/pic41.png&quot;&gt;&lt;img src=&quot;/img/pic41-300x150.png&quot; alt=&quot;Defaulted properties eliminates almost all configuration&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A couple of tricks to note when using this model:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s a big difference in classpath context scanning between “classpath:/&lt;em&gt;-spring.xml” and “classpath&lt;/em&gt;:/&lt;em&gt;-spring.xml”.  The first (with just one star) will pull in all the files that match “&lt;/em&gt;-spring.xml” in the &lt;em&gt;first&lt;/em&gt; directory on your classpath that contains any file matching that expression and then stop.  The second version (with classpath*) will do what you’d expect… it pulls in all files that match “*-spring.xml” from every directory in scans in your classpath.&lt;/li&gt;
  &lt;li&gt;Application property defaulting accepts literals after the colon, so it’s safe to do something like &lt;code&gt;${path:file:///blah}&lt;/code&gt; to default the property to the string &lt;code&gt;file:///blah&lt;/code&gt;.  You can also change the default string separator in the &lt;code&gt;PropertyPlaceholderConfigurer&lt;/code&gt; bean so your defaults look more like this: &lt;code&gt;${path?file:///blah}&lt;/code&gt;  (using a “?” as a separator)&lt;/li&gt;
  &lt;li&gt;It’s tempting to eliminate application.properties wherever there’s a default, but we avoided that for documentation reasons – we wanted to provide the implementers and users of our software with a one-stop location to discover and understand the configurability of our applications.  Thus, we adopted a standard that even if an application property is defaulted in a JAR’s spring context snippet, we still explicitly declare that property in a WAR’s top-level application.property and document how that property affects the system.&lt;/li&gt;
&lt;/ul&gt;
</description>
            <pubDate>Fri, 20 Jan 2012 09:26:07 -0800</pubDate>
            <link>http://opower.github.io/2012/01/20/spring-configuration-and-library-decomposition</link>
            <guid isPermaLink="true">http://opower.github.io/2012/01/20/spring-configuration-and-library-decomposition</guid>
        </item>
        
        <item>
            <title>Our Scala DSL for testing our web product</title>
            <description>&lt;p&gt;This is actually a fairly old bit of tech for us, but I’ve been reading &lt;a href=&quot;http://www.amazon.com/Domain-Specific-Languages-Addison-Wesley-Signature-Fowler/dp/0321712943&quot;&gt;Martin Fowler’s DSL Book&lt;/a&gt;, and thought it might be good to talk about what we’ve done.&lt;/p&gt;

&lt;p&gt;Our Domain-Specific Language is probably more domain-specific than you might be used to.  Frameworks like Ruby-on-Rails or ScalaTest are DSLs for very broad domains (web-app development, and testing, respectively).  Our DSL’s domain is &lt;em&gt;our web product&lt;/em&gt;.  Not any web product, not any Spring app, &lt;em&gt;our&lt;/em&gt; web app.  This is important, as it allows us to creating something that is very focused and specific to what we’re doing.  In general, the more specific the domain, the more concise and powerful you can make your DSL.&lt;/p&gt;

&lt;h3 id=&quot;the-domain-of-application-its-architecture&quot;&gt;The domain of application: its architecture&lt;/h3&gt;

&lt;p&gt;To understand how it works, you need to understand how the apppilcation is architected.  While it’s a Spring MVC web app, in the general sense, there’s a lot more convention around how it’s built.  If you’ve used a “web framework” like Spring MVC, you know that it’s really a giant library for responding to HTTP requests at its core, and that it’s not very opinionated; it’s generally just as easy to do things one way as it is another (check out &lt;a href=&quot;http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/web/bind/annotation/RequestMapping.html&quot;&gt;this&lt;/a&gt; if you disgree).  As such, you need conventions around how to use it. Developers shouldn’t spend time asking how to wire up URLs, or where code should go; they should be getting to work and building features.&lt;/p&gt;

&lt;p&gt;Our app is built along two main concepts: &lt;em&gt;pages&lt;/em&gt;, and &lt;em&gt;modules&lt;/em&gt;.  A Page is made up of one or more modules.  Each module contains a basic bit of information needed to display a page.  Think about websites that say “Hi, Dave!” in the upper corner; that “Hi, Dave” would be controlled by  a module.  Each page is backed by a controller whose job it is to expose &lt;strong&gt;only&lt;/strong&gt; what’s needed to configure the modules on the page. All stateful information (e.g. “who’s logged in?”) is in these controllers.  Modules, on the other hand, are stateless; they get all the information they need to render from the URL and query parameters.  Modules are made up of two parts: a resource, which identies the data to display, and a view, which renders that data.  A single resource can have many views, and together, they form a module.&lt;/p&gt;

&lt;p&gt;This is all glued together via a souped-up version of a &lt;code&gt;&amp;lt;jsp:include&amp;gt;&lt;/code&gt; tag.  A page jsp-includes a bunch of urls, that happen to be modules, and conform to these conventions.  We have scaffolding scripts to generate the massive boilerplate required to make this happen.&lt;/p&gt;

&lt;h3 id=&quot;testing-with-scala&quot;&gt;Testing with Scala&lt;/h3&gt;

&lt;p&gt;Which brings us to our DSL for testing this stuff.  Essentially, a module’s url can be requested and tested independently of any page; we don’t need to navigate through the application to test modules, since they are almost entirely stateless (typically, they might require a login, but this a cross-cutting concern).  By requesting the module’s URL, and forcing it to render a view, we also get test coverage of our JSP pages, and can push our app to QA with high confidence that all pages will at least render, and that the correct information will be somewhere on the page.&lt;/p&gt;

&lt;p&gt;This can all be tested with HTMLUnit, however the tests began to look like bloated assembly-language.  Enter Scala.  I started by writing out the ideal pattern of a test for a module.  Let’s consider a module that renders a person’s most recent bill.  Suppose we have two views of this module; in the “large” view, we want to see the bill’s cost, KWh used, and an account number.  In the “small” view (that we might use on a dashboard page), we want to see just the bill’s cost.  How might we test this?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resource for bill 34 from customer 123:
  requires login as customer 123
  contains &quot;45.67&quot; as the cost
  has a view &quot;small&quot;
  has a view &quot;large&quot;
    that contains &quot;156&quot; as the kwh
    that contains &quot;655321&quot; as the account number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I decided I wanted to write this in code, and have it work.  Not having time to write a parser (or invent a new language), I decided an internal DSL would be the way to go, and that Scala would let me get as close as possible to this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/customer/123/bill/34&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requiresLoginAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;45.67&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;small&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;large&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;156&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;kwh&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;655321&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;accountNumber&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code creates several data structures that our test can now walk.  Essentially, what this will test:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That accessing the url without being logged in gets an error&lt;/li&gt;
  &lt;li&gt;That, once logged in, requesting a view named “small” will not generate an error&lt;/li&gt;
  &lt;li&gt;That, once logged in, requesting a view named “large” will not generate an error&lt;/li&gt;
  &lt;li&gt;That neither view has message properties that are missing their values (we aggresively use message properties to allow localization)&lt;/li&gt;
  &lt;li&gt;That both views contain a div with the id price that contains the text “45.67”&lt;/li&gt;
  &lt;li&gt;That the “large” view also contains a div with id kwh that contains “156” &lt;strong&gt;and&lt;/strong&gt; a div with id “accountNumber” that contains “655321”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;getting-fancy&quot;&gt;Getting fancy&lt;/h3&gt;

&lt;p&gt;Since this is just Scala code, you can use this to do more sophisitcated things:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;accountNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;123&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;45.67&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;156&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;accountNumber&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;655321&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;876&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;156&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;n&quot;&gt;accountNumber&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;655321&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;4565&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;86&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;billId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testData&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/customer/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bill/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;billId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requiresLoginAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;inElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shouldNotContainElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;small&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;large&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;kwh&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
                                            &lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;accountNumber&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containsElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;noBill&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don’t know if the developers are totally in love with this DSL, but there’s so much you get for free, I’m certain they’d hate testing that by hand even more (or, worse, simply not test some of these things):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You never have to remember to check for authentication requirements&lt;/li&gt;
  &lt;li&gt;You never have to remember to check for missing message properties&lt;/li&gt;
  &lt;li&gt;You can dynamically generates tests via test-data (as demonstrated above)&lt;/li&gt;
  &lt;li&gt;Because making a new data structure in Scala is so easy, you can make very fluent tests and test data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this DSL is entirely useless to anyone but our web team.  It’s tailor-made to test our web product and our web product only.  The win, other than conciseness, readability, and brevity, was that this could be implemented and documented very quickly; I didn’t have to make the ultimate web-based tesitng DSL; just one that worked for our product.&lt;/p&gt;

&lt;p&gt;If you are considering creating a DSL, keep this in mind: make it exactly right for you, and fight the urge to make it more general.  Also, don’t be afraid to use Scala for this; it’s much easier than Java, and you can fully type-check and document it very easily.  I should note that I intentionally used very few of Scala’s features to do this; developers only need to learn a few new concepts to understand what this code does.&lt;/p&gt;
</description>
            <pubDate>Mon, 19 Sep 2011 10:34:57 -0700</pubDate>
            <link>http://opower.github.io/2011/09/19/our-scala-dsl-for-testing-our-web-product</link>
            <guid isPermaLink="true">http://opower.github.io/2011/09/19/our-scala-dsl-for-testing-our-web-product</guid>
        </item>
        
        <item>
            <title>Attentive Programming</title>
            <description>&lt;p&gt;I’m currently reading Matthew Crawford’s ”Shop Class as Soulcraft” who writes about how manual labor can make you spiritually whole. To get us to look at work in new ways, he describes work using the categories: &lt;em&gt;assertiveness&lt;/em&gt; and &lt;em&gt;attentiveness&lt;/em&gt;. Crawford writes that work is not exclusively assertive or attentive and that to obtain the spiritualism that comes from manual work, you need balanced quantities of both. Too much assertiveness, and you may destroy your work, while too much attentiveness and you could go out of business. Soulcraft is being able to apply just the right amount of each.&lt;/p&gt;

&lt;p&gt;I believe that Crawford’s categories can extend beyond the realm of manual labor. His descriptions really got me thinking about how they would apply to software engineering. What is “assertive” and “attentive” software engineering? I’ve always felt that programming brings with it a sort of spiritualistic satisfaction. Now Crawford gives me tools to examine programming in new ways.&lt;/p&gt;

&lt;p&gt;The assertive programmer is one who makes new or improves features. In this case, the engineer is on the cutting edge of product development and essentially makes something out of nothing. He or she “asserts” him or herself by creating new code or by combining or expanding infrastructure in new ways to make new things.&lt;/p&gt;

&lt;p&gt;This type of programming is fun and rewarding because you get to see something made. You also get a craftsman-level satisfaction and the pride of ownership knowing that the software is built well and that other people find it useful. Contrast this with the attentive programmer. The attentive programmer generally works with software that he or she didn’t make. And is given a problem which has perplexed others.&lt;/p&gt;

&lt;p&gt;I think that I am more akin to this type of programmer. I am a Database Architect who works on the OPOWER Scale Team. On the Scale team, we handle problems that reflect scalability issues with the software. We also get a first crack at designing new features that are scalable out of the box, and I think that puts us firmly in the assertive camp.&lt;/p&gt;

&lt;p&gt;I want to reflect more upon our reactive scalability work because I think this sort of work takes a different mindset and possibly a different software engineering approach. To be an attentive programmer you almost have to have a Zen-like disposition and “listen” to the information that you find. You may think that you understand the problem but you must verify if the hypothesis is true. And if it’s not, you must reexamine your assumptions, read the data again, and develop a new hypothesis to test.&lt;/p&gt;

&lt;p&gt;The attentive programmer knows that truth is the path to the right solution, and that’s exactly how we approach problems on the Scale team. I think the key to a good scalability engineer is attentiveness and checking preconceived notions at the door. This type of programmer needs lots of experience and must be open to a wide range of ideas where hunches based upon past experiences or fresh perspectives can be quickly dismissed or followed based upon the facts.&lt;/p&gt;

&lt;p&gt;To me probably nothing is more satisfying than taking a piece of code, no matter how complicated, that no one has been able to make go fast and making it fly. I’m always ready for the next problem and always wondering what I’m going to learn from that puzzle.&lt;/p&gt;

&lt;p&gt;Are you an attentive or assertive programmer, or some combination of? Why? Thinking about how you approach software engineering may help you raise your game and bring with it the satisfaction of rising above the status quo.&lt;/p&gt;
</description>
            <pubDate>Tue, 05 Jul 2011 11:00:34 -0700</pubDate>
            <link>http://opower.github.io/2011/07/05/attentive-programming</link>
            <guid isPermaLink="true">http://opower.github.io/2011/07/05/attentive-programming</guid>
        </item>
        
        <item>
            <title>Engineering's Second Bottom Line</title>
            <description>&lt;p&gt;OPOWER has a set of company values, the first of which is “We are double bottom line.”  Our two bottom lines are the environment (we want to improve that) and money (we want to make that).  Everyone in the company is fully bought in to the first bottom line.  Given our enterprisey business model, the engineering team cannot contribute directly to the company making money (accounting lingo deems us a liability, as does HR sometimes), so we have a slightly different second bottom line.&lt;/p&gt;

&lt;p&gt;We focus on how we build the product to ensure it supports the business for the long haul.  We take this part of our job very seriously and are constantly working to improve how we work.  We use some of the obvious practices from agile like scrum teams, story pointing, and short-term iteration planning to keep ourselves on track with the functionality we need to build over a three iteration horizon.  A more out-of-the-ordinary practice is having test team members fully embedded on our scrum teams.  The software engineers in test work alongside software engineers building functionality, and a task is not considered finished until it is tested through our automated regression suite.&lt;/p&gt;

&lt;p&gt;We do team retrospectives almost every iteration and keep a backlog of tasks to work on during regression weeks to keep improving our tools and process.  When it comes to coding, we have formal code reviews every three weeks as part of the iteration cycle, and ad hoc code reviews happen during the build.  Some of our reviews can get heated (though not personal), and everyone knows that the intent is to build the best product we can.  The reviews are also a lot of fun.&lt;/p&gt;

&lt;p&gt;The point of all of this work is to get everyone in line with building a product for the future.  OPOWER is only four years old, and our product has been live and generating energy efficiency gains for over three years.  We are pushing ourselves to build new products to improve those efficiency gains and to positively impact the environment in other ways.  Our clients are pushing us to deliver more functionality to them faster and faster, and in the meantime, they keep giving us more and more data to learn from and use.  If we took a short-term approach to our jobs as engineers, the platform we are building would collapse in on itself, and that would do no one any good.&lt;/p&gt;

&lt;p&gt;Wil Shipley, of Delicious Monster fame, wrote an &lt;a href=&quot;http://blog.wilshipley.com/2011/04/success-and-farming-vs-mining.html&quot;&gt;interesting article&lt;/a&gt; recently, drawing an analogy comparing building software companies to either farming or mining.  When you mine, you take out a loan, purchase a ton of equipment, hire people to dig, strike gold, and profit.  When the gold runs out, you retire.  On the other hand, when you farm, you take out a loan, purchase some equipment and seed, and then you plant and tend.  If things go well, you reap some reward during the harvest season, after which you repeat the cycle, reinvesting your money back into your land.  If you are an adept farmer, you may figure out how to rotate crops and make the most of your land all year long, thus increasing profits.  In his analogy, farming is a long-term approach to building a company, and mining is what you do with a social network for dogs – build it to flip it.&lt;/p&gt;

&lt;p&gt;At OPOWER, this analogy is particularly apropos, because of our first bottom line.  What is more sustainable – farming or mining?  Clearly, OPOWER is a farming company, and the engineering team is working to ensure the harvest comes in season after season.&lt;/p&gt;
</description>
            <pubDate>Mon, 02 May 2011 06:27:07 -0700</pubDate>
            <link>http://opower.github.io/2011/05/02/engineerings-second-bottom-line</link>
            <guid isPermaLink="true">http://opower.github.io/2011/05/02/engineerings-second-bottom-line</guid>
        </item>
        
        <item>
            <title>Helping DC Area Agile Testers Help Themselves</title>
            <description>&lt;p&gt;The &lt;a href=&quot;http://www.meetup.com/D-CAST/&quot;&gt;DC Agile Software Testing MeetUp group&lt;/a&gt; met for the &lt;a href=&quot;http://www.meetup.com/D-CAST/events/16781293/&quot;&gt;first time&lt;/a&gt; yesterday. Thanks to everyone that attended for contributing to a very positive experience.&lt;/p&gt;

&lt;p&gt;We’re looking for “Better Ways To Make Better Software”.&lt;/p&gt;

&lt;p&gt;Agile software development is a great way to make good software that satisfies real needs and creates real value to those who build and use that software. Everyone on the team is concerned with the quality of the product. However, sometimes it can be an overwhelming task being the team member whose job it is to insure that the quality of the product is sufficient.&lt;/p&gt;

&lt;p&gt;DCAST was created to develop a community of those interested in agile software testing who are also interested in testing agile products more effectively and more efficiently. By sharing our hard won knowledge we can all help make each other’s lives easier and more productive.&lt;/p&gt;

&lt;p&gt;If you’re interested in sharing how you have raised the quality bar of your agile processes, we would love it if you were a part of this community. If you’re interested in learning (or want to all learn together), you’re even more welcome.&lt;/p&gt;

&lt;p&gt;We’re going to be &lt;a href=&quot;http://www.meetup.com/D-CAST/events/17021962/&quot;&gt;meeting again in about a month&lt;/a&gt;. Come check out the group if you’re in the DC area.&lt;/p&gt;
</description>
            <pubDate>Wed, 23 Mar 2011 06:55:43 -0700</pubDate>
            <link>http://opower.github.io/2011/03/23/helping-dc-area-agile-testers-help-themselves</link>
            <guid isPermaLink="true">http://opower.github.io/2011/03/23/helping-dc-area-agile-testers-help-themselves</guid>
        </item>
        
    </channel>
</rss>
